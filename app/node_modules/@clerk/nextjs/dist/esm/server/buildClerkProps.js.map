{"version":3,"sources":["../../../src/server/buildClerkProps.ts"],"sourcesContent":["import type { Organization, Session, User } from '@clerk/backend';\nimport {\n  AuthStatus,\n  decodeJwt,\n  makeAuthObjectSerializable,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend';\n\nimport { API_KEY, API_URL, API_VERSION, SECRET_KEY } from './clerkClient';\nimport type { RequestLike } from './types';\nimport { getAuthKeyFromRequest, injectSSRStateIntoObject } from './utils';\n\ntype BuildClerkPropsInitState = { user?: User | null; session?: Session | null; organization?: Organization | null };\n\n/**\n * To enable Clerk SSR support, include this object to the `props`\n * returned from `getServerSideProps`. This will automatically make the auth state available to\n * the Clerk components and hooks during SSR, the hydration phase and CSR.\n * @example\n * import { getAuth } from '@clerk/nextjs/server';\n *\n * export const getServerSideProps = ({ req }) => {\n *   const { authServerSideProps } = getAuth(req);\n *   const myData = getMyData();\n *\n *   return {\n *     props: { myData, authServerSideProps },\n *   };\n * };\n */\ntype BuildClerkProps = (req: RequestLike, authState?: BuildClerkPropsInitState) => Record<string, unknown>;\n\nexport const buildClerkProps: BuildClerkProps = (req, initState = {}) => {\n  const authToken = getAuthKeyFromRequest(req, 'AuthToken');\n  const authStatus = getAuthKeyFromRequest(req, 'AuthStatus') as AuthStatus;\n  const authMessage = getAuthKeyFromRequest(req, 'AuthMessage');\n  const authReason = getAuthKeyFromRequest(req, 'AuthReason');\n\n  const options = {\n    apiKey: API_KEY,\n    secretKey: SECRET_KEY,\n    apiUrl: API_URL,\n    apiVersion: API_VERSION,\n    authStatus,\n    authMessage,\n    authReason,\n  };\n\n  let authObject;\n  if (!authStatus || authStatus !== AuthStatus.SignedIn) {\n    authObject = signedOutAuthObject(options);\n  } else {\n    const { payload, raw } = decodeJwt(authToken as string);\n    authObject = signedInAuthObject(payload, { ...options, token: raw.text });\n  }\n\n  const sanitizedAuthObject = makeAuthObjectSerializable(sanitizeAuthObject({ ...authObject, ...initState }));\n  return injectSSRStateIntoObject({}, sanitizedAuthObject);\n};\n"],"mappings":"AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,SAAS,SAAS,aAAa,kBAAkB;AAE1D,SAAS,uBAAuB,gCAAgC;AAsBzD,MAAM,kBAAmC,CAAC,KAAK,YAAY,CAAC,MAAM;AACvE,QAAM,YAAY,sBAAsB,KAAK,WAAW;AACxD,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAC1D,QAAM,cAAc,sBAAsB,KAAK,aAAa;AAC5D,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAE1D,QAAM,UAAU;AAAA,IACd,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,CAAC,cAAc,eAAe,WAAW,UAAU;AACrD,iBAAa,oBAAoB,OAAO;AAAA,EAC1C,OAAO;AACL,UAAM,EAAE,SAAS,IAAI,IAAI,UAAU,SAAmB;AACtD,iBAAa,mBAAmB,SAAS,EAAE,GAAG,SAAS,OAAO,IAAI,KAAK,CAAC;AAAA,EAC1E;AAEA,QAAM,sBAAsB,2BAA2B,mBAAmB,EAAE,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC;AAC1G,SAAO,yBAAyB,CAAC,GAAG,mBAAmB;AACzD;","names":[]}