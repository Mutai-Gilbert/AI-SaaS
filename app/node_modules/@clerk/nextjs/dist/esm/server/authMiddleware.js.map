{"version":3,"sources":["../../../src/server/authMiddleware.ts"],"sourcesContent":["/* eslint-disable turbo/no-undeclared-env-vars */\nimport type { AuthObject, RequestState } from '@clerk/backend';\nimport { buildRequestUrl, constants } from '@clerk/backend';\nimport { DEV_BROWSER_JWT_MARKER, setDevBrowserJWTInURL } from '@clerk/shared/devBrowser';\nimport type Link from 'next/link';\nimport type { NextFetchEvent, NextMiddleware, NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { isRedirect, mergeResponses, paths, setHeader, stringifyHeaders } from '../utils';\nimport { withLogger } from '../utils/debugLogger';\nimport { authenticateRequest, handleInterstitialState, handleUnknownState } from './authenticateRequest';\nimport { SECRET_KEY } from './clerkClient';\nimport {\n  clockSkewDetected,\n  infiniteRedirectLoopDetected,\n  informAboutProtectedRouteInfo,\n  receivedRequestForIgnoredRoute,\n} from './errors';\nimport { redirectToSignIn } from './redirect';\nimport type { NextMiddlewareResult, WithAuthOptions } from './types';\nimport { isDevAccountPortalOrigin } from './url';\nimport {\n  apiEndpointUnauthorizedNextResponse,\n  decorateRequest,\n  isCrossOrigin,\n  isDevelopmentFromApiKey,\n  setRequestHeadersOnNextResponse,\n} from './utils';\n\ntype WithPathPatternWildcard<T> = `${T & string}(.*)`;\ntype NextTypedRoute<T = Parameters<typeof Link>['0']['href']> = T extends string ? T : never;\n\n// For extra safety, we won't recommend using a `/(.*)` route matcher.\ntype ExcludeRootPath<T> = T extends '/' ? never : T;\n\n// We want to show suggestions but also allow for free-text input\n// the (string & {}) type prevents the TS compiler from merging the typed union with the string type\n// https://github.com/Microsoft/TypeScript/issues/29729#issuecomment-505826972\ntype RouteMatcherWithNextTypedRoutes =\n  | WithPathPatternWildcard<ExcludeRootPath<NextTypedRoute>>\n  | NextTypedRoute\n  // This is necessary to allow all string, using something other than `{}` here WILL break types!\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  | (string & {});\n\nconst INFINITE_REDIRECTION_LOOP_COOKIE = '__clerk_redirection_loop';\n\n/**\n * The default ideal matcher that excludes the _next directory (internals) and all static files,\n * but it will match the root route (/) and any routes that start with /api or /trpc.\n */\nexport const DEFAULT_CONFIG_MATCHER = ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'];\n\n/**\n * Any routes matching this path will be ignored by the middleware.\n * This is the inverted version of DEFAULT_CONFIG_MATCHER.\n */\nexport const DEFAULT_IGNORED_ROUTES = [`/((?!api|trpc))(_next.*|.+\\\\.[\\\\w]+$)`];\n/**\n * Any routes matching this path will be treated as API endpoints by the middleware.\n */\nexport const DEFAULT_API_ROUTES = ['/api/(.*)', '/trpc/(.*)'];\n\ntype RouteMatcherParam =\n  | Array<RegExp | RouteMatcherWithNextTypedRoutes>\n  | RegExp\n  | RouteMatcherWithNextTypedRoutes\n  | ((req: NextRequest) => boolean);\n\ntype IgnoredRoutesParam = Array<RegExp | string> | RegExp | string | ((req: NextRequest) => boolean);\ntype ApiRoutesParam = IgnoredRoutesParam;\n\ntype WithClerkUrl<T> = T & {\n  /**\n   * When a NextJs app is hosted on a platform different from Vercel\n   * or inside a container (Netlify, Fly.io, AWS Amplify, docker etc),\n   * req.url is always set to `localhost:3000` instead of the actual host of the app.\n   *\n   * The `authMiddleware` uses the value of the available req.headers in order to construct\n   * and use the correct url internally. This url is then exposed as `experimental_clerkUrl`,\n   * intended to be used within `beforeAuth` and `afterAuth` if needed.\n   */\n  experimental_clerkUrl: NextRequest['nextUrl'];\n};\n\ntype BeforeAuthHandler = (\n  req: WithClerkUrl<NextRequest>,\n  evt: NextFetchEvent,\n) => NextMiddlewareResult | Promise<NextMiddlewareResult> | false | Promise<false>;\n\ntype AfterAuthHandler = (\n  auth: AuthObject & { isPublicRoute: boolean; isApiRoute: boolean },\n  req: WithClerkUrl<NextRequest>,\n  evt: NextFetchEvent,\n) => NextMiddlewareResult | Promise<NextMiddlewareResult>;\n\ntype AuthMiddlewareParams = WithAuthOptions & {\n  /**\n   * A function that is called before the authentication middleware is executed.\n   * If a redirect response is returned, the middleware will respect it and redirect the user.\n   * If false is returned, the auth middleware will not execute and the request will be handled as if the auth middleware was not present.\n   */\n  beforeAuth?: BeforeAuthHandler;\n  /**\n   * A function that is called after the authentication middleware is executed.\n   * This function has access to the auth object and can be used to execute logic based on the auth state.\n   */\n  afterAuth?: AfterAuthHandler;\n  /**\n   * A list of routes that should be accessible without authentication.\n   * You can use glob patterns to match multiple routes or a function to match against the request object.\n   * Path patterns and regular expressions are supported, for example: `['/foo', '/bar(.*)'] or `[/^\\/foo\\/.*$/]`\n   * The sign in and sign up URLs are included by default, unless a function is provided.\n   * For more information, see: https://clerk.com/docs\n   */\n  publicRoutes?: RouteMatcherParam;\n  /**\n   * A list of routes that should be ignored by the middleware.\n   * This list typically includes routes for static files or Next.js internals.\n   * For improved performance, these routes should be skipped using the default config.matcher instead.\n   */\n  ignoredRoutes?: IgnoredRoutesParam;\n  /**\n   * A list of routes that should be treated as API endpoints.\n   * When user is signed out, the middleware will return a 401 response for these routes, instead of redirecting the user.\n   *\n   * If omitted, the following heuristics will be used to determine an API endpoint:\n   * - The route path is ['/api/(.*)', '/trpc/(.*)'],\n   * - or the request has `Content-Type` set to `application/json`,\n   * - or the request method is not one of: `GET`, `OPTIONS` ,` HEAD`\n   *\n   * @default undefined\n   */\n  apiRoutes?: ApiRoutesParam;\n  /**\n   * Enables extra debug logging.\n   */\n  debug?: boolean;\n};\n\nexport interface AuthMiddleware {\n  (params?: AuthMiddlewareParams): NextMiddleware;\n}\n\nconst authMiddleware: AuthMiddleware = (...args: unknown[]) => {\n  const [params = {}] = args as [AuthMiddlewareParams?];\n  const { beforeAuth, afterAuth, publicRoutes, ignoredRoutes, apiRoutes, ...options } = params;\n\n  const isIgnoredRoute = createRouteMatcher(ignoredRoutes || DEFAULT_IGNORED_ROUTES);\n  const isPublicRoute = createRouteMatcher(withDefaultPublicRoutes(publicRoutes));\n  const isApiRoute = createApiRoutes(apiRoutes);\n  const defaultAfterAuth = createDefaultAfterAuth(isPublicRoute, isApiRoute, params);\n\n  return withLogger('authMiddleware', logger => async (_req: NextRequest, evt: NextFetchEvent) => {\n    if (options.debug) {\n      logger.enable();\n    }\n    const req = withNormalizedClerkUrl(_req);\n\n    logger.debug('URL debug', {\n      url: req.nextUrl.href,\n      method: req.method,\n      headers: stringifyHeaders(req.headers),\n      nextUrl: req.nextUrl.href,\n      clerkUrl: req.experimental_clerkUrl.href,\n    });\n    logger.debug('Options debug', { ...options, beforeAuth: !!beforeAuth, afterAuth: !!afterAuth });\n\n    if (isIgnoredRoute(req)) {\n      logger.debug({ isIgnoredRoute: true });\n      if (isDevelopmentFromApiKey(options.secretKey || SECRET_KEY) && !params.ignoredRoutes) {\n        console.warn(\n          receivedRequestForIgnoredRoute(req.experimental_clerkUrl.href, JSON.stringify(DEFAULT_CONFIG_MATCHER)),\n        );\n      }\n      return setHeader(NextResponse.next(), constants.Headers.AuthReason, 'ignored-route');\n    }\n\n    const beforeAuthRes = await (beforeAuth && beforeAuth(req, evt));\n\n    if (beforeAuthRes === false) {\n      logger.debug('Before auth returned false, skipping');\n      return setHeader(NextResponse.next(), constants.Headers.AuthReason, 'skip');\n    } else if (beforeAuthRes && isRedirect(beforeAuthRes)) {\n      logger.debug('Before auth returned redirect, following redirect');\n      return setHeader(beforeAuthRes, constants.Headers.AuthReason, 'redirect');\n    }\n\n    const requestState = await authenticateRequest(req, options);\n    if (requestState.isUnknown) {\n      logger.debug('authenticateRequest state is unknown', requestState);\n      return handleUnknownState(requestState);\n    } else if (requestState.isInterstitial && isApiRoute(req)) {\n      logger.debug('authenticateRequest state is interstitial in an API route', requestState);\n      return handleUnknownState(requestState);\n    } else if (requestState.isInterstitial) {\n      logger.debug('authenticateRequest state is interstitial', requestState);\n\n      assertClockSkew(requestState, options);\n\n      const res = handleInterstitialState(requestState, options);\n      return assertInfiniteRedirectionLoop(req, res, options, requestState);\n    }\n\n    const auth = Object.assign(requestState.toAuth(), {\n      isPublicRoute: isPublicRoute(req),\n      isApiRoute: isApiRoute(req),\n    });\n    logger.debug(() => ({ auth: JSON.stringify(auth), debug: auth.debug() }));\n    const afterAuthRes = await (afterAuth || defaultAfterAuth)(auth, req, evt);\n    const finalRes = mergeResponses(beforeAuthRes, afterAuthRes) || NextResponse.next();\n    logger.debug(() => ({ mergedHeaders: stringifyHeaders(finalRes.headers) }));\n\n    if (isRedirect(finalRes)) {\n      logger.debug('Final response is redirect, following redirect');\n      const res = setHeader(finalRes, constants.Headers.AuthReason, 'redirect');\n      return appendDevBrowserOnCrossOrigin(req, res, options);\n    }\n\n    if (options.debug) {\n      setRequestHeadersOnNextResponse(finalRes, req, { [constants.Headers.EnableDebug]: 'true' });\n      logger.debug(`Added ${constants.Headers.EnableDebug} on request`);\n    }\n\n    return decorateRequest(req, finalRes, requestState);\n  });\n};\n\nexport { authMiddleware };\n\n/**\n * Create a function that matches a request against the specified routes.\n * Precomputes the glob matchers for the public routes, so we don't have to\n * recompile the regular expressions on every request.\n */\nexport const createRouteMatcher = (routes: RouteMatcherParam) => {\n  if (typeof routes === 'function') {\n    return (req: NextRequest) => routes(req);\n  }\n\n  const routePatterns = [routes || ''].flat().filter(Boolean);\n  const matchers = precomputePathRegex(routePatterns);\n  return (req: NextRequest) => matchers.some(matcher => matcher.test(req.nextUrl.pathname));\n};\n\nconst createDefaultAfterAuth = (\n  isPublicRoute: ReturnType<typeof createRouteMatcher>,\n  isApiRoute: ReturnType<typeof createApiRoutes>,\n  params: AuthMiddlewareParams,\n) => {\n  return (auth: AuthObject, req: WithClerkUrl<NextRequest>) => {\n    if (!auth.userId && !isPublicRoute(req)) {\n      if (isApiRoute(req)) {\n        informAboutProtectedRoute(req.experimental_clerkUrl.pathname, params, true);\n        return apiEndpointUnauthorizedNextResponse();\n      } else {\n        informAboutProtectedRoute(req.experimental_clerkUrl.pathname, params, false);\n      }\n      return redirectToSignIn({ returnBackUrl: req.experimental_clerkUrl.href });\n    }\n    return NextResponse.next();\n  };\n};\n\nconst precomputePathRegex = (patterns: Array<string | RegExp>) => {\n  return patterns.map(pattern => (pattern instanceof RegExp ? pattern : paths.toRegexp(pattern)));\n};\n\nconst matchRoutesStartingWith = (path: string) => {\n  path = path.replace(/\\/$/, '');\n  return new RegExp(`^${path}(/.*)?$`);\n};\n\nconst withDefaultPublicRoutes = (publicRoutes: RouteMatcherParam | undefined) => {\n  if (typeof publicRoutes === 'function') {\n    return publicRoutes;\n  }\n\n  const routes = [publicRoutes || ''].flat().filter(Boolean);\n  // TODO: refactor it to use common config file eg SIGN_IN_URL from ./clerkClient\n  // we use process.env for now to support testing\n  const signInUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || '';\n  if (signInUrl) {\n    routes.push(matchRoutesStartingWith(signInUrl));\n  }\n  // TODO: refactor it to use common config file eg SIGN_UP_URL from ./clerkClient\n  // we use process.env for now to support testing\n  const signUpUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL || '';\n  if (signUpUrl) {\n    routes.push(matchRoutesStartingWith(signUpUrl));\n  }\n  return routes;\n};\n\n// Grabs the dev browser JWT from cookies and appends it to the redirect URL when redirecting to cross-origin.\n// Middleware runs on the server side, before clerk-js is loaded, that's why we need Cookies.\nconst appendDevBrowserOnCrossOrigin = (req: WithClerkUrl<NextRequest>, res: Response, opts: AuthMiddlewareParams) => {\n  const location = res.headers.get('location');\n\n  const shouldAppendDevBrowser = res.headers.get(constants.Headers.ClerkRedirectTo) === 'true';\n\n  if (\n    shouldAppendDevBrowser &&\n    !!location &&\n    isDevelopmentFromApiKey(opts.secretKey || SECRET_KEY) &&\n    isCrossOrigin(req.experimental_clerkUrl, location)\n  ) {\n    const dbJwt = req.cookies.get(DEV_BROWSER_JWT_MARKER)?.value || '';\n\n    // Next.js 12.1+ allows redirects only to absolute URLs\n    const url = new URL(location);\n\n    // Use query param for Account Portal pages so that SSR can access the dev_browser JWT\n    const asQueryParam = isDevAccountPortalOrigin(url.hostname);\n\n    const urlWithDevBrowser = setDevBrowserJWTInURL(url, dbJwt, asQueryParam);\n\n    return NextResponse.redirect(urlWithDevBrowser.href, res);\n  }\n  return res;\n};\n\n// - Default behavior:\n//    If the route path is `['/api/(.*)*', '*/trpc/(.*)']`\n//    or Request has `Content-Type: application/json`\n//    or Request method is not-GET,OPTIONS,HEAD,\n//    then this is considered an API route.\n//\n// - If the user has provided a specific `apiRoutes` prop in `authMiddleware` then all the above are discarded,\n//   and only routes that match the user’s provided paths are considered API routes.\nconst createApiRoutes = (apiRoutes: RouteMatcherParam | undefined): ((req: WithClerkUrl<NextRequest>) => boolean) => {\n  if (apiRoutes) {\n    return createRouteMatcher(apiRoutes);\n  }\n  const isDefaultApiRoute = createRouteMatcher(DEFAULT_API_ROUTES);\n  return (req: WithClerkUrl<NextRequest>) =>\n    isDefaultApiRoute(req) || isRequestMethodIndicatingApiRoute(req) || isRequestContentTypeJson(req);\n};\n\nconst isRequestContentTypeJson = (req: NextRequest): boolean => {\n  const requestContentType = req.headers.get(constants.Headers.ContentType);\n  return requestContentType === constants.ContentTypes.Json;\n};\n\nconst isRequestMethodIndicatingApiRoute = (req: NextRequest): boolean => {\n  const requestMethod = req.method.toLowerCase();\n  return !['get', 'head', 'options'].includes(requestMethod);\n};\n\n/**\n * In development, attempt to detect clock skew based on the requestState. This check should run when requestState.isInterstitial is true. If detected, we throw an error.\n */\nconst assertClockSkew = (requestState: RequestState, opts: AuthMiddlewareParams): void => {\n  if (!isDevelopmentFromApiKey(opts.secretKey || SECRET_KEY)) {\n    return;\n  }\n\n  if (requestState.reason === 'token-not-active-yet') {\n    throw new Error(clockSkewDetected(requestState.message));\n  }\n};\n\n// When in development, we want to prevent infinite interstitial redirection loops.\n// We incrementally set a `__clerk_redirection_loop` cookie, and when it loops 6 times, we throw an error.\n// We also utilize the `referer` header to skip the prefetch requests.\nconst assertInfiniteRedirectionLoop = (\n  req: NextRequest,\n  res: NextResponse,\n  opts: AuthMiddlewareParams,\n  requestState: RequestState,\n): NextResponse => {\n  if (!isDevelopmentFromApiKey(opts.secretKey || SECRET_KEY)) {\n    return res;\n  }\n\n  const infiniteRedirectsCounter = Number(req.cookies.get(INFINITE_REDIRECTION_LOOP_COOKIE)?.value) || 0;\n  if (infiniteRedirectsCounter === 6) {\n    // Infinite redirect detected, is it clock skew?\n    // We check for token-expired here because it can be a valid, recoverable scenario, but in a redirect loop a token-expired error likely indicates clock skew.\n    if (requestState.reason === 'token-expired') {\n      throw new Error(clockSkewDetected(requestState.message));\n    }\n\n    // Not clock skew, return general error\n    throw new Error(infiniteRedirectLoopDetected());\n  }\n\n  // Skip the prefetch requests (when hovering a Next Link element)\n  if (req.headers.get('referer') === req.url) {\n    res.cookies.set({\n      name: INFINITE_REDIRECTION_LOOP_COOKIE,\n      value: `${infiniteRedirectsCounter + 1}`,\n      maxAge: 3,\n    });\n  }\n  return res;\n};\n\nconst withNormalizedClerkUrl = (req: NextRequest): WithClerkUrl<NextRequest> => {\n  const clerkUrl = req.nextUrl.clone();\n\n  const originUrl = buildRequestUrl(req);\n\n  clerkUrl.port = originUrl.port;\n  clerkUrl.protocol = originUrl.protocol;\n  clerkUrl.host = originUrl.host;\n\n  return Object.assign(req, { experimental_clerkUrl: clerkUrl });\n};\n\nconst informAboutProtectedRoute = (path: string, params: AuthMiddlewareParams, isApiRoute: boolean) => {\n  if (params.debug || isDevelopmentFromApiKey(params.secretKey || SECRET_KEY)) {\n    console.warn(\n      informAboutProtectedRouteInfo(\n        path,\n        !!params.publicRoutes,\n        !!params.ignoredRoutes,\n        isApiRoute,\n        DEFAULT_IGNORED_ROUTES,\n      ),\n    );\n  }\n};\n"],"mappings":"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","names":[]}